/**
 * Command Class Configuration, version 1.
 *
 * Auto-generated, do not edit.
 */

import { CommandClasses, CommandClassPacket, CommandPacket, Packet } from "@ezwave/codec";
import { CommandDefinition, convertFromJsonCommand, JsonCommandDefinition } from "@ezwave/spec";

export enum ConfigurationV1Commands {
	ConfigurationGet = 0x05,
	ConfigurationReport = 0x06,
	ConfigurationSet = 0x04,
}

export interface ConfigurationV1ConfigurationGetData {
	parameterNumber: number; // 1 byte unsigned integer
}

export interface ConfigurationV1ConfigurationReportData {
	parameterNumber: number; // 1 byte unsigned integer
	configurationValue: Buffer; // variable length
}

export interface ConfigurationV1ConfigurationSetData {
	parameterNumber: number; // 1 byte unsigned integer
	default: boolean; // level[7]
	configurationValue: Buffer; // variable length
}

export class ConfigurationV1 extends CommandClassPacket<ConfigurationV1Commands> {
	public static readonly commandClass: number = CommandClasses.Configuration; // 0x70 (112)
	public static readonly version: number = 1;

	public static matches(packet: Packet): boolean {
		return packet.commandClass === this.commandClass;
	}

	public constructor(commandAndPayload: Buffer) {
		super(ConfigurationV1, commandAndPayload);
	}
}

export class ConfigurationGet extends CommandPacket<ConfigurationV1ConfigurationGetData> {
	public static readonly CommandClass: typeof ConfigurationV1 = ConfigurationV1;
	public static readonly command: number = 0x05; // 5
	public static readonly definition: CommandDefinition = convertFromJsonCommand({
		"command": 5,
		"name": "ConfigurationGet",
		"help": "Configuration Get",
		"status": "Active",
		"params": [
			{
				"type": "Integer",
				"name": "parameterNumber",
				"help": "Parameter Number",
				"length": 1
			}
		]
	} as JsonCommandDefinition);

	public static matches(packet: Packet): boolean {
		return packet.tryAs(ConfigurationV1)?.command === this.command;
	}

	public constructor(data: Buffer | ConfigurationV1ConfigurationGetData) {
		super(ConfigurationGet, data);
	}
};

export class ConfigurationReport extends CommandPacket<ConfigurationV1ConfigurationReportData> {
	public static readonly CommandClass: typeof ConfigurationV1 = ConfigurationV1;
	public static readonly command: number = 0x06; // 6
	public static readonly definition: CommandDefinition = convertFromJsonCommand({
		"command": 6,
		"name": "ConfigurationReport",
		"help": "Configuration Report",
		"status": "Active",
		"params": [
			{
				"type": "Integer",
				"name": "parameterNumber",
				"help": "Parameter Number",
				"length": 1
			},
			{
				"type": "Bitfield",
				"name": "level",
				"help": "Level",
				"length": 1,
				"fields": [
					{
						"fieldType": "Integer",
						"name": "reserved",
						"mask": 248,
						"shift": 3,
						"reserved": true
					},
					{
						"fieldType": "Integer",
						"name": "size",
						"mask": 7,
						"shift": 0,
						"lengthOf": {
							"refs": [
								"configurationValue"
							]
						},
						"isAutogenerated": true
					}
				]
			},
			{
				"type": "Blob",
				"name": "configurationValue",
				"help": "Configuration Value",
				"length": {
					"lengthType": "Ref",
					"from": {
						"ref": "level.size"
					}
				}
			}
		]
	} as JsonCommandDefinition);

	public static matches(packet: Packet): boolean {
		return packet.tryAs(ConfigurationV1)?.command === this.command;
	}

	public constructor(data: Buffer | ConfigurationV1ConfigurationReportData) {
		super(ConfigurationReport, data);
	}
};

export class ConfigurationSet extends CommandPacket<ConfigurationV1ConfigurationSetData> {
	public static readonly CommandClass: typeof ConfigurationV1 = ConfigurationV1;
	public static readonly command: number = 0x04; // 4
	public static readonly definition: CommandDefinition = convertFromJsonCommand({
		"command": 4,
		"name": "ConfigurationSet",
		"help": "Configuration Set",
		"status": "Active",
		"params": [
			{
				"type": "Integer",
				"name": "parameterNumber",
				"help": "Parameter Number",
				"length": 1
			},
			{
				"type": "Bitfield",
				"name": "level",
				"help": "Level",
				"length": 1,
				"fields": [
					{
						"fieldType": "Boolean",
						"name": "default",
						"mask": 128,
						"shift": 7
					},
					{
						"fieldType": "Integer",
						"name": "reserved",
						"mask": 120,
						"shift": 3,
						"reserved": true
					},
					{
						"fieldType": "Integer",
						"name": "size",
						"mask": 7,
						"shift": 0,
						"lengthOf": {
							"refs": [
								"configurationValue"
							]
						},
						"isAutogenerated": true
					}
				]
			},
			{
				"type": "Blob",
				"name": "configurationValue",
				"help": "Configuration Value",
				"length": {
					"lengthType": "Ref",
					"from": {
						"ref": "level.size"
					}
				}
			}
		]
	} as JsonCommandDefinition);

	public static matches(packet: Packet): boolean {
		return packet.tryAs(ConfigurationV1)?.command === this.command;
	}

	public constructor(data: Buffer | ConfigurationV1ConfigurationSetData) {
		super(ConfigurationSet, data);
	}
};
