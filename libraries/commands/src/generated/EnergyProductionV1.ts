/**
 * Command Class Energy Production, version 1.
 *
 * Auto-generated, do not edit.
 */

import { CommandClasses, CommandClassPacket, CommandPacket, Packet } from "@ezwave/codec";
import { convertFromJsonCommand, JsonCommandDefinition } from "@ezwave/spec";

export enum EnergyProductionV1Commands {
	EnergyProductionGet = 0x02,
	EnergyProductionReport = 0x03,
}

export interface EnergyProductionV1EnergyProductionGetData {
	parameterNumber: ParameterNumberEnum; // 1 byte enum value
}

export interface EnergyProductionV1EnergyProductionReportData {
	parameterNumber: ParameterNumberEnum; // 1 byte enum value
	precision: number; // level[7..5]
	scale: number; // level[4..3]
	value: Buffer; // variable length
}

export enum ParameterNumberEnum {
	InstantEnergyProduction = 0x0,
	TotalEnergyProduction = 0x1,
	EnergyProductionToday = 0x2,
	TotalProductionTime = 0x3,
}

export class EnergyProductionV1 extends CommandClassPacket<EnergyProductionV1Commands> {
	public static readonly commandClass = CommandClasses.EnergyProduction; // 0x90 (144)
	public static readonly version = 1;

	public static matches(packet: Packet): boolean {
		return packet.commandClass === this.commandClass;
	}

	constructor(commandAndPayload: Buffer) {
		super(EnergyProductionV1, commandAndPayload);
	}
}

export class EnergyProductionGet extends CommandPacket<EnergyProductionV1EnergyProductionGetData> {
	public static readonly CommandClass = EnergyProductionV1;
	public static readonly command = 0x02; // 2
	public static readonly definition = convertFromJsonCommand({
		"command": 2,
		"name": "EnergyProductionGet",
		"help": "Energy Production Get",
		"status": "Active",
		"params": [
			{
				"type": "Enum",
				"name": "parameterNumber",
				"help": "Parameter Number",
				"length": 1,
				"values": {
					"0": {
						"name": "InstantEnergyProduction",
						"help": "Instant energy production"
					},
					"1": {
						"name": "TotalEnergyProduction",
						"help": "Total energy production"
					},
					"2": {
						"name": "EnergyProductionToday",
						"help": "Energy production today"
					},
					"3": {
						"name": "TotalProductionTime",
						"help": "Total production time"
					}
				}
			}
		]
	} as JsonCommandDefinition);

	static matches(packet: Packet): boolean {
		return packet.tryAs(EnergyProductionV1)?.command === this.command;
	}

	constructor(data: Buffer | EnergyProductionV1EnergyProductionGetData) {
		super(EnergyProductionGet, data);
	}
};

export class EnergyProductionReport extends CommandPacket<EnergyProductionV1EnergyProductionReportData> {
	public static readonly CommandClass = EnergyProductionV1;
	public static readonly command = 0x03; // 3
	public static readonly definition = convertFromJsonCommand({
		"command": 3,
		"name": "EnergyProductionReport",
		"help": "Energy Production Report",
		"status": "Active",
		"params": [
			{
				"type": "Enum",
				"name": "parameterNumber",
				"help": "Parameter Number",
				"length": 1,
				"values": {
					"0": {
						"name": "InstantEnergyProduction",
						"help": "Instant energy production"
					},
					"1": {
						"name": "TotalEnergyProduction",
						"help": "Total energy production"
					},
					"2": {
						"name": "EnergyProductionToday",
						"help": "Energy production today"
					},
					"3": {
						"name": "TotalProductionTime",
						"help": "Total production time"
					}
				}
			},
			{
				"type": "Bitfield",
				"name": "level",
				"help": "Level",
				"length": 1,
				"fields": [
					{
						"fieldType": "Integer",
						"name": "precision",
						"mask": 224,
						"shift": 5
					},
					{
						"fieldType": "Integer",
						"name": "scale",
						"mask": 24,
						"shift": 3
					},
					{
						"fieldType": "Integer",
						"name": "size",
						"mask": 7,
						"shift": 0,
						"lengthOf": {
							"refs": [
								"value"
							]
						},
						"isAutogenerated": true
					}
				]
			},
			{
				"type": "Blob",
				"name": "value",
				"help": "Value",
				"length": {
					"lengthType": "Ref",
					"from": {
						"ref": "level.size"
					}
				}
			}
		]
	} as JsonCommandDefinition);

	static matches(packet: Packet): boolean {
		return packet.tryAs(EnergyProductionV1)?.command === this.command;
	}

	constructor(data: Buffer | EnergyProductionV1EnergyProductionReportData) {
		super(EnergyProductionReport, data);
	}
};
