/**
 * Command Class Multi Cmd, version 1.
 *
 * Auto-generated, do not edit.
 */

import { CommandClasses, CommandClassPacket, CommandPacket, Packet } from "@ezwave/codec";
import { convertFromJsonCommand, JsonCommandDefinition } from "@ezwave/spec";

export enum MultiCmdV1Commands {
	MultiCmdEncap = 0x01,
}

export interface MultiCmdV1MultiCmdEncapData {
	encapsulatedCommand: Array<{ // variable length
		commandClass: number; // 1 byte unsigned integer
		command: number; // 1 byte unsigned integer
		data: Buffer; // variable length
	}>;
}

export class MultiCmdV1 extends CommandClassPacket<MultiCmdV1Commands> {
	public static readonly commandClass = CommandClasses.MultiCmd; // 0x8f (143)
	public static readonly version = 1;

	public static matches(packet: Packet): boolean {
		return packet.commandClass === this.commandClass;
	}

	constructor(commandAndPayload: Buffer) {
		super(MultiCmdV1, commandAndPayload);
	}
}

export class MultiCmdEncap extends CommandPacket<MultiCmdV1MultiCmdEncapData> {
	public static readonly CommandClass = MultiCmdV1;
	public static readonly command = 0x01; // 1
	public static readonly definition = convertFromJsonCommand({
		"command": 1,
		"name": "MultiCmdEncap",
		"help": "Multi Cmd Encap",
		"status": "Active",
		"params": [
			{
				"type": "Integer",
				"name": "numberOfCommands",
				"help": "Number of Commands",
				"length": 1,
				"lengthOf": {
					"refs": [
						"encapsulatedCommand"
					]
				},
				"isAutogenerated": true
			},
			{
				"type": "Group",
				"name": "encapsulatedCommand",
				"help": "Encapsulated_Command",
				"length": {
					"lengthType": "Ref",
					"from": {
						"ref": "numberOfCommands"
					}
				},
				"params": [
					{
						"type": "Integer",
						"name": "commandLength",
						"help": "Command Length",
						"length": 1,
						"lengthOf": {
							"refs": [
								"encapsulatedCommand.data"
							]
						},
						"isAutogenerated": true
					},
					{
						"type": "Integer",
						"name": "commandClass",
						"help": "Command Class",
						"length": 1,
						"valueType": "CommandClass"
					},
					{
						"type": "Integer",
						"name": "command",
						"help": "Command",
						"length": 1,
						"valueType": "Command"
					},
					{
						"type": "Blob",
						"name": "data",
						"help": "Data",
						"length": {
							"lengthType": "Ref",
							"from": {
								"ref": "encapsulatedCommand.commandLength"
							},
							"offset": 2
						},
						"blobType": "CommandData"
					}
				]
			}
		]
	} as JsonCommandDefinition);

	static matches(packet: Packet): boolean {
		return packet.tryAs(MultiCmdV1)?.command === this.command;
	}

	constructor(data: Buffer | MultiCmdV1MultiCmdEncapData) {
		super(MultiCmdEncap, data);
	}
};
