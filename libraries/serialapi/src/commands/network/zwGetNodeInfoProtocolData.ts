/* eslint-disable @typescript-eslint/naming-convention */
import { decodeParams } from "@ezwave/codec";
import { convertFromJsonParams, Parameter, RefMode } from "@ezwave/spec";
import { RequestRunner } from "../RequestRunner";
import { ResponseRequestBuilder } from "../requests";
import { SerialApiCommandCode } from "../serialApiCommandCode";

export interface ZwGetNodeInfoProtocolDataRequest {
	nodeId: number;
}

export interface ZwNodeInfoProtocolData {
	/**
	 * True when node is always listening (AL).
	 * False for Frequently Listening (FL / FLiRS) and Non-Listening (NL) nodes.
	 */
	listening: boolean; // properties1[7]
	routing: boolean; // properties1[6]
	maxBaudRate: MaxBaudRateEnum; // properties1[5..3]
	protocolVersion: ProtocolVersionEnum; // properties1[2..0]
	optionalFunctionality: boolean; // properties2[7]

	/**
	 * FLiRS node with 1000ms wake-up beam.
	 */
	sensor1000ms: boolean; // properties2[6]

	/**
	 * FLiRS node with 250ms wake-up beam.
	 */
	sensor250ms: boolean; // properties2[5]
	beamCapability: boolean; // properties2[4]
	routingSlave: boolean; // properties2[3]
	specificDevice: boolean; // properties2[2]
	controller: boolean; // properties2[1]
	security: boolean; // properties2[0]
	speedExtension: SpeedExtensionEnum; // properties3[2..0]
	basicDeviceClass?: number; // 1 byte unsigned integer
	genericDeviceClass: number; // 1 byte unsigned integer
	specificDeviceClass: number; // 1 byte unsigned integer
}

export enum MaxBaudRateEnum {
	Reserved = 0x0,
	_9600bps = 0x1,
	_40kbps = 0x2,
}

export enum ProtocolVersionEnum {
	Reserved = 0x0,
	ZWaveVersion20 = 0x1,
	ZWaveVersionZDK50xZDK42x = 0x2,
	ZWaveVersionZDK45xAndZDK60x = 0x3,
	Reserved0 = 0x4,
	Reserved1 = 0x5,
	Reserved2 = 0x6,
	Reserved3 = 0x7,
}

export enum SpeedExtensionEnum {
	Reserved = 0x0,
	_100kbps = 0x1,
	_200kbps = 0x2,
}

// Use same (autogenerated) decoder as is used for NIF in ZWaveV1 command class,
// but without the list of command classes.
const ZW_GET_NIPD_PARAMS: Parameter[] = convertFromJsonParams([
	{
		type: "Bitfield",
		name: "properties1",
		help: "Properties1",
		length: 1,
		fields: [
			{
				fieldType: "Boolean",
				name: "listening",
				mask: 128,
				shift: 7,
			},
			{
				fieldType: "Boolean",
				name: "routing",
				mask: 64,
				shift: 6,
			},
			{
				fieldType: "Enum",
				name: "maxBaudRate",
				mask: 56,
				shift: 3,
				values: {
					"0": {
						name: "Reserved",
						help: "Reserved",
					},
					"1": {
						name: "_9600bps",
						help: "9.6 kbps",
					},
					"2": {
						name: "_40kbps",
						help: "40 kbps",
					},
				},
			},
			{
				fieldType: "Enum",
				name: "protocolVersion",
				mask: 7,
				shift: 0,
				values: {
					"0": {
						name: "Reserved",
						help: "Reserved",
					},
					"1": {
						name: "ZWaveVersion20",
						help: "Z-Wave Version 2.0",
					},
					"2": {
						name: "ZWaveVersionZDK50xZDK42x",
						help: "Z-Wave version ZDK 5.0x, ZDK 4.2x",
					},
					"3": {
						name: "ZWaveVersionZDK45xAndZDK60x",
						help: "Z-Wave version ZDK 4.5x and ZDK 6.0x",
					},
					"4": {
						name: "Reserved",
						help: "Reserved",
					},
					"5": {
						name: "Reserved",
						help: "Reserved",
					},
					"6": {
						name: "Reserved",
						help: "Reserved",
					},
					"7": {
						name: "Reserved",
						help: "Reserved",
					},
				},
			},
		],
	},
	{
		type: "Bitfield",
		name: "properties2",
		help: "Properties2",
		length: 1,
		fields: [
			{
				fieldType: "Boolean",
				name: "optionalFunctionality",
				mask: 128,
				shift: 7,
			},
			{
				fieldType: "Boolean",
				name: "sensor1000ms",
				mask: 64,
				shift: 6,
			},
			{
				fieldType: "Boolean",
				name: "sensor250ms",
				mask: 32,
				shift: 5,
			},
			{
				fieldType: "Boolean",
				name: "beamCapability",
				mask: 16,
				shift: 4,
			},
			{
				fieldType: "Boolean",
				name: "routingSlave",
				mask: 8,
				shift: 3,
			},
			{
				fieldType: "Boolean",
				name: "specificDevice",
				mask: 4,
				shift: 2,
			},
			{
				fieldType: "Boolean",
				name: "controller",
				mask: 2,
				shift: 1,
				presenceOf: {
					refs: ["basicDeviceClass"],
				},
				isAutogenerated: false,
			},
			{
				fieldType: "Boolean",
				name: "security",
				mask: 1,
				shift: 0,
			},
		],
	},
	{
		type: "Bitfield",
		name: "properties3",
		help: "Properties3",
		length: 1,
		fields: [
			{
				fieldType: "Integer",
				name: "reserved2",
				mask: 248,
				shift: 3,
				reserved: true,
			},
			{
				fieldType: "Enum",
				name: "speedExtension",
				mask: 7,
				shift: 0,
				values: {
					"0": {
						name: "Reserved",
						help: "Reserved",
					},
					"1": {
						name: "_100kbps",
						help: "100 kbps",
					},
					"2": {
						name: "_200kbps",
						help: "200 kbps",
					},
				},
			},
		],
	},
	{
		type: "Integer",
		name: "basicDeviceClass",
		help: "Basic Device Class",
		optional: {
			ref: "properties2.controller",
		},
		length: 1,
		valueType: "BasicDevice",
	},
	{
		type: "Integer",
		name: "genericDeviceClass",
		help: "Generic Device Class",
		length: 1,
		valueType: "GenericDevice",
	},
	{
		type: "Integer",
		name: "specificDeviceClass",
		help: "Specific Device Class",
		length: 1,
		valueType: "SpecificDevice",
	},
	{
		type: "Blob",
		name: "commandClasses",
		help: "Command Classes",
		length: {
			lengthType: "Auto",
		},
		blobType: "CommandClasses",
	},
] as Array<Parameter<RefMode.Json>>);

// Internal, use class instead
export function zwGetNodeInfoProtocolDataBuilder(
	request: ZwGetNodeInfoProtocolDataRequest
): ResponseRequestBuilder<ZwNodeInfoProtocolData> {
	return () => ({
		command: SerialApiCommandCode.ZW_GET_VERSION,
		params: Buffer.from([request.nodeId]),
		parseResponse: (response) => decodeParams(ZW_GET_NIPD_PARAMS, response),
	});
}

/**
 * Get Node Information protocol data about Z-Wave Node, as stored
 * in the controller itself.
 *
 * Note: this information includes protocol-specific information like
 * FLiRS capability, but excludes a full list of supported/controlled
 * command classes.
 *
 * @see {@link ZwRequestNodeInfo} for the version that sends an
 * explicit request to the node including command classes (but excludes
 * the protocol-related pieces).
 */
export class ZwGetNodeInfoProtocolData extends RequestRunner<
	typeof zwGetNodeInfoProtocolDataBuilder
> {
	public constructor(request: ZwGetNodeInfoProtocolDataRequest) {
		super(zwGetNodeInfoProtocolDataBuilder, request);
	}
}
