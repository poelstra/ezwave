import { decodeParams } from "@ezwave/codec";
import {
	BitmaskType,
	convertFromJsonParams,
	LengthType,
	Parameter,
	ParameterType,
} from "@ezwave/spec";
import { RequestRunner } from "../RequestRunner";
import { ResponseRequestBuilder } from "../requests";
import { SerialApiCommandCode } from "../serialApiCommandCode";

export enum NodeCapabilityFlags {
	SlaveAPI = 0, // Otherwise ControllerAPI
	TimerSupported = 1,
	SecondaryController = 2, // Otherwise Primary
	IsSIS = 3,
}

export interface SerialAPIInitData {
	apiVersion: number;
	capabilities: Set<NodeCapabilityFlags>;
	nodes: Set<number>;
	chipType: number;
	chipVersion: number;
}

const SERIAL_API_INIT_DATA_PARAMS: Parameter[] = convertFromJsonParams([
	{ type: ParameterType.Integer, length: 1, name: "apiVersion", help: "" },
	{ type: ParameterType.Bitmask, length: 1, name: "capabilities", help: "" },
	{
		type: ParameterType.Integer,
		length: 1,
		name: "nodesLength",
		help: "",
		isAutogenerated: true,
		lengthOf: { refs: ["nodes"] },
	},
	{
		type: ParameterType.Bitmask,
		name: "nodes",
		help: "",
		length: {
			lengthType: LengthType.ParameterReference,
			from: { ref: "nodesLength" },
		},
		bitmaskType: BitmaskType.NodeNumber,
	},
	{
		type: ParameterType.Integer,
		length: 1,
		name: "chipType",
		help: "",
	},
	{
		type: ParameterType.Integer,
		length: 1,
		name: "chipVersion",
		help: "",
	},
]);

export function serialApiGetInitDataBuilder(): ResponseRequestBuilder<SerialAPIInitData> {
	return () => ({
		command: SerialApiCommandCode.SERIAL_API_GET_INIT_DATA,
		parseResponse: (response) =>
			decodeParams<SerialAPIInitData>(
				SERIAL_API_INIT_DATA_PARAMS,
				response
			),
	});
}

export class SerialApiGetInitData extends RequestRunner<
	typeof serialApiGetInitDataBuilder
> {
	public constructor() {
		super(serialApiGetInitDataBuilder, undefined);
	}
}
